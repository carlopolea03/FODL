//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportDataSet", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public partial class ReportDataSet : object
    {
        
        private string DataSetNameField;
        
        private string SQLQueryField;
        
        private string StoredProcedureCommandTextField;
        
        private ReportService.CommandType StoredProcedureCommandTypeField;
        
        private ReportService.StoredProcedureParameter[] StoredProcedureParametersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSetName
        {
            get
            {
                return this.DataSetNameField;
            }
            set
            {
                this.DataSetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SQLQuery
        {
            get
            {
                return this.SQLQueryField;
            }
            set
            {
                this.SQLQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoredProcedureCommandText
        {
            get
            {
                return this.StoredProcedureCommandTextField;
            }
            set
            {
                this.StoredProcedureCommandTextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportService.CommandType StoredProcedureCommandType
        {
            get
            {
                return this.StoredProcedureCommandTypeField;
            }
            set
            {
                this.StoredProcedureCommandTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportService.StoredProcedureParameter[] StoredProcedureParameters
        {
            get
            {
                return this.StoredProcedureParametersField;
            }
            set
            {
                this.StoredProcedureParametersField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandType", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public enum CommandType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Text = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StoredProcedure = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoredProcedureParameter", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public partial class StoredProcedureParameter : object
    {
        
        private System.Data.DbType SpPramDataTypeField;
        
        private string SpPramNameField;
        
        private string SpPramValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DbType SpPramDataType
        {
            get
            {
                return this.SpPramDataTypeField;
            }
            set
            {
                this.SpPramDataTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpPramName
        {
            get
            {
                return this.SpPramNameField;
            }
            set
            {
                this.SpPramNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpPramValue
        {
            get
            {
                return this.SpPramValueField;
            }
            set
            {
                this.SpPramValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public partial class Report : object
    {
        
        private string DirectoryField;
        
        private string FileNameField;
        
        private string FolderNameField;
        
        private ReportService.ReportParameter[] ReportParametersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Directory
        {
            get
            {
                return this.DirectoryField;
            }
            set
            {
                this.DirectoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderName
        {
            get
            {
                return this.FolderNameField;
            }
            set
            {
                this.FolderNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportService.ReportParameter[] ReportParameters
        {
            get
            {
                return this.ReportParametersField;
            }
            set
            {
                this.ReportParametersField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportParameter", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public partial class ReportParameter : object
    {
        
        private string NameField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Database", Namespace="http://schemas.datacontract.org/2004/07/iReport")]
    public partial class Database : object
    {
        
        private string DbNameField;
        
        private string DbPwdField;
        
        private string DbServerField;
        
        private string DbUserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbName
        {
            get
            {
                return this.DbNameField;
            }
            set
            {
                this.DbNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbPwd
        {
            get
            {
                return this.DbPwdField;
            }
            set
            {
                this.DbPwdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbServer
        {
            get
            {
                return this.DbServerField;
            }
            set
            {
                this.DbServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbUser
        {
            get
            {
                return this.DbUserField;
            }
            set
            {
                this.DbUserField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportService.IService1")]
    public interface IService1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GeneratePDF", ReplyAction="http://tempuri.org/IService1/GeneratePDFResponse")]
        System.Threading.Tasks.Task<byte[]> GeneratePDFAsync(ReportService.ReportDataSet[] datasets, ReportService.Report report, ReportService.Database database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateExcel", ReplyAction="http://tempuri.org/IService1/GenerateExcelResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateExcelAsync(ReportService.ReportDataSet[] datasets, ReportService.Report report, ReportService.Database database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetReport", ReplyAction="http://tempuri.org/IService1/SetReportResponse")]
        System.Threading.Tasks.Task SetReportAsync(ReportService.Report report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GeneratePDFNew", ReplyAction="http://tempuri.org/IService1/GeneratePDFNewResponse")]
        System.Threading.Tasks.Task<byte[]> GeneratePDFNewAsync(ReportService.ReportDataSet[] datasets, ReportService.Database database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateExcelNew", ReplyAction="http://tempuri.org/IService1/GenerateExcelNewResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateExcelNewAsync(ReportService.ReportDataSet[] datasets, ReportService.Database database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddDataSource", ReplyAction="http://tempuri.org/IService1/AddDataSourceResponse")]
        System.Threading.Tasks.Task AddDataSourceAsync(string DataSetName, string dataSet);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface IService1Channel : ReportService.IService1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ReportService.IService1>, ReportService.IService1
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<byte[]> GeneratePDFAsync(ReportService.ReportDataSet[] datasets, ReportService.Report report, ReportService.Database database)
        {
            return base.Channel.GeneratePDFAsync(datasets, report, database);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateExcelAsync(ReportService.ReportDataSet[] datasets, ReportService.Report report, ReportService.Database database)
        {
            return base.Channel.GenerateExcelAsync(datasets, report, database);
        }
        
        public System.Threading.Tasks.Task SetReportAsync(ReportService.Report report)
        {
            return base.Channel.SetReportAsync(report);
        }
        
        public System.Threading.Tasks.Task<byte[]> GeneratePDFNewAsync(ReportService.ReportDataSet[] datasets, ReportService.Database database)
        {
            return base.Channel.GeneratePDFNewAsync(datasets, database);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateExcelNewAsync(ReportService.ReportDataSet[] datasets, ReportService.Database database)
        {
            return base.Channel.GenerateExcelNewAsync(datasets, database);
        }
        
        public System.Threading.Tasks.Task AddDataSourceAsync(string DataSetName, string dataSet)
        {
            return base.Channel.AddDataSourceAsync(DataSetName, dataSet);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
               
                return new System.ServiceModel.EndpointAddress("http://CRONUS.semiraramining.net/jreport/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService1,
        }
    }
}
